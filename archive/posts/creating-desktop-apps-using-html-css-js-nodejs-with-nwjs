<!DOCTYPE html>
<html lang="en" ng-app="zanonApp" class="ng-scope"><head><style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style><style type="text/css">.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="keywords" content="Angular, Node, MongoDB, AWS">
    <meta name="author" content="Diego Zanon">
    <link rel="icon" href="https://zanon.io/favicon.ico" type="image/x-icon">

    <title ng-bind="title + 'Zanon'" class="ng-binding">Creating Desktop Apps using HTML/CSS/JS + Node.js with NW.js - Zanon</title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/assets/highlight.min.css">
    <link rel="stylesheet" href="/css/site.css">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <base href="/">
  <body ng-controller="MainController" class="ng-scope">

    <header>
      <div>
        <div class="container">
          <div class="row">
            <div class="col-xs-4 col-sm-2 col-md-2">
              <h1 class="site-name">
                <a href="/">Zanon</a>
              </h1>
            </div>
            <div class="hidden-xs col-sm-6 col-md-6">
              <!-- empty -->
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://twitter.com/zanon_io">
                <img src="/images/twitter.png" alt="twitter" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://github.com/zanon-io">
                <img src="/images/github.png" alt="github" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://diego.zanon.io">
                <img src="/images/about.png" alt="about" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="/feed.xml" target="_blank">
                <img src="/images/rss.png" alt="rss" class="img-responsive">
              </a>
            </div>
          </div>
        </div>

      </div>

      <div class="container">
        <nav id="nav" class="navbar-inverse navbar-static-top">
          <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse" aria-expanded="false" aria-controls="navbar">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
          </div>
          <div id="navbar" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
              <li ng-class="{ 'active': active.all }" class="active"> <a ng-click="filter('all');" href="/">All posts</a></li>
              <li ng-class="{ 'active': active.angular }"><a ng-click="filter('angular');" href="/">Angular</a></li>
              <li ng-class="{ 'active': active.node }"> <a ng-click="filter('node');" href="/">Node</a></li>
              <li ng-class="{ 'active': active.mongodb }"> <a ng-click="filter('mongodb');" href="/">MongoDB</a></li>
              <li ng-class="{ 'active': active.aws }"> <a ng-click="filter('aws');" href="/">AWS</a></li>
              <li ng-class="{ 'active': active.serverless }"> <a ng-click="filter('serverless');" href="/">Serverless</a></li>
            </ul>
          </div><!--/.nav-collapse -->
        </nav>
      </div>
    </header>

    <div class="container">
      <div class="content">
        <!-- ngView:  --><div class="ng-scope" autoscroll="true" ng-view="" highlight-code="">
<div class="row post-container ng-scope">
  <div class="col-md-offset-1 col-md-10 post">
    <h1>Creating Desktop Apps using HTML/CSS/JS + Node.js with NW.js</h1>
    <p class="date">SEP 20, 2015</p>
    <div>

<h2 id="what-is-nw-js-">What is NW.js?</h2>
<p>Maybe you've already heard about node-webkit. It was <a href="https://groups.google.com/forum/#!msg/nwjs-general/V1FhvfaFIzQ/720xKVd0jNkJ">renamed to NW.js</a>, but keeps the same objective: bring your web development tools and skills to build multi-platform desktop apps.</p>
<p>NW.js is an app runtime for writing <em>native</em> apps that uses Chromium to render your interface and allows you to run your Node.js modules desktop-side.</p>
<p>There are many nice apps using it as you can see in <a href="https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js">this link</a>. For example, this nice <a href="https://github.com/Aluxian/WhatsApp-Desktop">unofficial WhatsApp app for desktop</a>:</p>
<p><img src="https://zanon.io/images/posts/2015-09-20-whatsapp.png" alt="whatsapp"></p>
<h2 id="update-jul-31-2016">UPDATE: Jul 31, 2016</h2>
<blockquote>
<p>I haven't tried <a href="http://electron.atom.io/">Electron</a> yet, but some friends (and many people out there) prefer Electron than NW.js. I suggest you to read the pros and cons of each one before deciding to use NW.js and to read this long tutorial.</p>
</blockquote>
<h2 id="setting-it-up">Setting it up</h2>
<p>The first step is to download the executable built for your operating system from the <a href="https://github.com/nwjs/nw.js#user-content-downloads">project page</a>.</p>
<p>When running NW.js, it will search for a package.json file to know what should be loaded and some extra configuration, like the default window size.</p>
<p>For a simple test, create the package.json file with the following content:</p>
<pre><code class="lang-javascript hljs">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"nw-hello-world"</span>,
  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,
  <span class="hljs-string">"main"</span>: <span class="hljs-string">"index.html"</span>
}
</code></pre>
<p>And the index.html with the following:</p>
<pre><code class="lang-html hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<p>After unpacking the NW.js file that you've just downloaded, you'll run your application calling the NW.js program and passing as an argument the path to your project.</p>
<p>On Windows:</p>
<pre><code class="lang-xml hljs">&gt; C:\path\to\nwjs\nw.exe C:\path\to\your\project
</code></pre>
<p>On Linux:</p>
<pre><code class="lang-xml hljs">&gt; /path/to/nwjs /path/to/your/project
</code></pre>
<p>On OSX, the executable binary is in a hidden directory within the .app file. You can call it as:</p>
<pre><code class="lang-xml hljs">&gt; /path/to/nwjs/Contents/MacOS/nwjs /path/to/your/project
</code></pre>
<p>or</p>
<pre><code class="lang-xml hljs">&gt; open -n -a nwjs --args "/path/to/your/project"
</code></pre>
<p>A better way to run is adding the NW command to PATH (Windows) or bash shell (OSX).</p>
<h2 id="developing-apps">Developing Apps</h2>
<h3 id="window-properties">Window Properties</h3>
<p>If you run this hello world demo, you'll get the following:</p>
<p><img src="https://zanon.io/images/posts/2015-09-20-nw-hello-world.png" alt="nw-hello-world"></p>
<p>By default, for debugging purposes, NW.js shows the address bar, the developer tools button, navigation arrows and two (?!) refresh buttons. For production code, this toolbar can be easily hidden setting the window.toolbar property to false in the package.json file.</p>
<pre><code class="lang-javascript hljs">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"nw-hello-world"</span>,
  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,
  <span class="hljs-string">"main"</span>: <span class="hljs-string">"index.html"</span>,
  <span class="hljs-string">"window"</span>: {
    <span class="hljs-string">"toolbar"</span>: <span class="hljs-literal">false</span>
  }
}
</code></pre>
<p>Another main configuration for deployment is to link your application icon. This is done setting the path in the window.icon property. With the window property, you can also set a default window size for your app and max-min ranges.</p>
<pre><code class="lang-javascript hljs">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"nw-hello-world"</span>,
  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,
  <span class="hljs-string">"main"</span>: <span class="hljs-string">"index.html"</span>,
  <span class="hljs-string">"window"</span>: {
    <span class="hljs-string">"toolbar"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"icon"</span>: <span class="hljs-string">"my-app-icon.png"</span>,
    <span class="hljs-string">"fullscreen"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"resizable"</span> : <span class="hljs-literal">true</span>,
    <span class="hljs-string">"width"</span>: <span class="hljs-number">800</span>,
    <span class="hljs-string">"height"</span>: <span class="hljs-number">600</span>,
    <span class="hljs-string">"min_width"</span>: <span class="hljs-number">400</span>,
    <span class="hljs-string">"min_height"</span>: <span class="hljs-number">300</span>
  }
}
</code></pre>
<p>You can take a look in this <a href="https://github.com/nwjs/nw.js/wiki/Manifest-format">link</a> for a full list of configuration properties.</p>
<h3 id="using-node-modules">Using Node Modules</h3>
<p>Using node modules is pretty straightforward. For example, if you want to use Node module <strong>request</strong>, you need to download the module and save its path to your package.json file. It can be done automatically with the NPM command:</p>
<pre><code class="lang-xml hljs">npm install request --save
</code></pre>
<p>Next, reference you JavaScript file inside your index.html:</p>
<pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>In the example below, I'm also using jQuery to handle the UI. However, for a larger application, mixing UI and app's logic in the same file is very hard to maintain. You'll likely need a JavaScript framework, like Angular or Ember, to have a better separation of concerns. If the jQuery lib is in a subdirectory, you can reference it using:</p>
<pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>For a demo, you can test with the following app.js file:</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">'request'</span>).defaults({ <span class="hljs-attr">encoding</span>: <span class="hljs-literal">null</span> });

request.get(<span class="hljs-string">'http://nwjs.io/images/nw.png'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, response, body</span>) </span>{

  <span class="hljs-keyword">if</span> (err || response.statusCode != <span class="hljs-number">200</span>)
    <span class="hljs-keyword">throw</span> <span class="hljs-string">'Error retrieving image'</span>;

  <span class="hljs-keyword">var</span> base64Image = <span class="hljs-string">"data:image/png;base64,"</span> + <span class="hljs-keyword">new</span> Buffer(body).toString(<span class="hljs-string">'base64'</span>);

  <span class="hljs-comment">// using jQuery to write the response to the UI</span>
  $(<span class="hljs-string">'#img'</span>).append(<span class="hljs-string">'&lt;img src=\"'</span> + base64Image + <span class="hljs-string">'\" /&gt;'</span>);
});
</code></pre>
<p>index.html</p>
<pre><code class="lang-html hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"img"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<p>With this demo, you'll get the following result:</p>
<p><img src="https://zanon.io/images/posts/2015-09-20-nw-image.png" alt="nw-image"></p>
<h3 id="native-features">Native Features</h3>
<p>To make the app a truly desktop app, some features are necessary like a menu bar and a tray icon.</p>
<p>The code for a tray icon is the same for all platforms. However, the menu bar may have a different behavior between platforms. That's because Windows and Linux allows one menu bar for each window that your app opens and OSX just allows one menu bar per application. So, best practice here is to set a menu bar only for your main window.</p>
<h3 id="menu-bar">Menu Bar</h3>
<p><img src="https://zanon.io/images/posts/2015-09-20-menu.png" alt="menu"></p>
<p>To get this result, just edit your app.js file to the following:</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> menubar = <span class="hljs-keyword">new</span> nw.Menu({
  <span class="hljs-attr">type</span>: <span class="hljs-string">'menubar'</span>
});

<span class="hljs-keyword">var</span> fileMenu = <span class="hljs-keyword">new</span> nw.Menu();

fileMenu.append(<span class="hljs-keyword">new</span> nw.MenuItem({
  <span class="hljs-attr">label</span>: <span class="hljs-string">'New File'</span>,
  <span class="hljs-attr">click</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    alert(<span class="hljs-string">'Clicked to create a new file'</span>);
  }
}));

<span class="hljs-keyword">var</span> openRecentMenu = <span class="hljs-keyword">new</span> nw.Menu();

openRecentMenu.append(<span class="hljs-keyword">new</span> nw.MenuItem({
  <span class="hljs-attr">label</span>: <span class="hljs-string">'Recente File X'</span>,
  <span class="hljs-attr">click</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    alert(<span class="hljs-string">'Clicked to open a recent file'</span>);
  }
}));

menubar.append(<span class="hljs-keyword">new</span> nw.MenuItem({ <span class="hljs-attr">label</span>: <span class="hljs-string">'File'</span>, <span class="hljs-attr">submenu</span>: fileMenu}));
fileMenu.append(<span class="hljs-keyword">new</span> nw.MenuItem({ <span class="hljs-attr">label</span>: <span class="hljs-string">'Open Recent File'</span>, <span class="hljs-attr">submenu</span>: openRecentMenu}));

<span class="hljs-keyword">var</span> win = nw.Window.get();
win.menu = menubar;
</code></pre>
<h3 id="tray-icons">Tray Icons</h3>
<p><img src="https://zanon.io/images/posts/2015-09-20-tray.png" alt="tray"></p>
<p>This simple tray was created with the following code:</p>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> tray = <span class="hljs-keyword">new</span> nw.Tray({
  <span class="hljs-attr">icon</span> : <span class="hljs-string">'my-app-icon.png'</span>,
  <span class="hljs-attr">title</span>: <span class="hljs-string">'My App Tray'</span>
});

<span class="hljs-keyword">var</span> menu = <span class="hljs-keyword">new</span> nw.Menu();
menu.append(<span class="hljs-keyword">new</span> nw.MenuItem({
  <span class="hljs-attr">label</span>: <span class="hljs-string">'Do something'</span>
}));

tray.menu = menu;
</code></pre>
<h2 id="distributing">Distributing</h2>
<p>You need to package your source code with the NW.js binaries. For a easy way to do this, try the NPM module <a href="https://github.com/nwjs/nw-builder">nw-builder</a>.</p>
<h3 id="installation-prefer-a-global-install-with-the-g-argument-">Installation: (prefer a global install with the <code>-g</code> argument)</h3>
<pre><code class="lang-xml hljs">&gt; npm install nw-builder -g
</code></pre>
<h3 id="usage-create-a-deploy-js-file-with-the-following-content">Usage: create a <strong>deploy.js</strong> file with the following content</h3>
<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> NwBuilder = <span class="hljs-built_in">require</span>(<span class="hljs-string">'nw-builder'</span>);
<span class="hljs-keyword">var</span> nw = <span class="hljs-keyword">new</span> NwBuilder({
  <span class="hljs-attr">files</span>: [<span class="hljs-string">'./**'</span>], <span class="hljs-comment">// simple-glob format</span>
  platforms: [<span class="hljs-string">'osx32'</span>, <span class="hljs-string">'osx64'</span>, <span class="hljs-string">'win32'</span>, <span class="hljs-string">'win64'</span>, <span class="hljs-string">'linux32'</span>, <span class="hljs-string">'linux64'</span>]
});

nw.build().then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'all done!'</span>);
}).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{
  <span class="hljs-built_in">console</span>.error(error);
});
</code></pre>
<h3 id="deploying-">Deploying:</h3>
<pre><code class="lang-xml hljs">&gt; node deploy.js
</code></pre>
<p>Now is the time to be shocked: wow! 60 MB for a hello world app! So, that's a downside of using NW.js. It requires the user to download at least 60 MB for the webkit browser and Node.js dependencies.</p>
<h3 id="source-code-security">Source Code Security</h3>
<p>Since you are distributing your app with all of your source code minified, it's possible to find it and clone the app. If you want protection, you need to compile it to native code using V8 snapshots. Take a look in this <a href="https://github.com/nwjs/nw.js/wiki/Protect-JavaScript-source-code-with-v8-snapshot">link</a> for a how-to. Just note that, currently, compiled code runs <strong>30% slower</strong> than normal JS files.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So, that was the basic. If you are interested, you can continue following the <a href="https://github.com/nwjs/nw.js/wiki">NW.js wiki</a> to learn many more important features. Or you can click in this <a href="https://github.com/zcbenz/nw-sample-apps">link</a> for nice sample apps or this <a href="https://github.com/szwacz/nw-boilerplate">link</a> to get a boilerplate app.</p>
<p>Again, just to reinforce, the disadvantages is that your user need to download extra 60 MB to run your app and, if you need to protect your source code, your app will be 30% slower.</p>
<p>However, I do believe that NW.js has a potential and can be useful to create nice multi-platform apps if you, or your team, is already used to work with Node.js and Web Development.</p>
<h2 id="update-jul-31-2016">UPDATE: Jul 31, 2016</h2>
<blockquote>
<p>I've updated this tutorial according to v0.16 (changes related with previous tutorial were related with how to get the Tray and Menu objects).</p>
</blockquote>
    </div>
  </div>
</div>
</div>
      </div>
    </div>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular-route.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.min.js"></script>

    <script src="/js/app.js"></script>
    <script src="/js/controllers.js"></script>
    <script src="/js/directives.js"></script>
    <script src="/js/routes.js"></script>

    <script src="/js/assets/404game.min.js"></script>
    <script src="/js/assets/highlight.min.js"></script>
  

</body></html>